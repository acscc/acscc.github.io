set.seed(42)
# Generate a sine wave
data <- sin(1:100)
# Define the number of time steps (lags) to use for the LSTM
time_steps <- 10
# Create input sequences and corresponding targets
X <- t(sapply(1:(length(data) - time_steps), function(i) data[i:(i + time_steps - 1)]))
y <- data[(time_steps + 1):length(data)]
# Reshape X to be [samples, time_steps, features] as required by LSTM
X <- array(X, dim = c(nrow(X), time_steps, 1))
X
dim(X)
X[, , 1]
dim(X)
plot(data)
plot(data)
plot(y)
plot(X[, 1, 1], type="l")
set.seed(42)
# Parameters
n <- 500  # Length of the time series
# Component 1: Long-range sinusoidal component
t <- 1:n
sin_component <- sin(2 * pi * t / 50)
# Component 2: Random walk with drift
random_walk <- cumsum(rnorm(n, mean = 0.1, sd = 0.5))
# Component 3: Non-linear delayed interaction
delay <- 30
non_linear_component <- numeric(n)
for (i in (delay+1):n) {
non_linear_component[i] <- 0.5 * sin_component[i - delay] * random_walk[i - delay]
}
# Combined time series
time_series <- sin_component + random_walk + non_linear_component
# Plot the time series
plot(time_series, type = 'l', main = 'Generated Time Series with Long-Range Dependencies', xlab = 'Time', ylab = 'Value')
plot(sin_component, type="l")
plot(non_linear_component, type="l")
plot(random_walk, type="l")
# Plot the time series
plot(time_series, type = 'l', main = 'Generated Time Series with Long-Range Dependencies', xlab = 'Time', ylab = 'Value')
6/9
9 * (6/9)
9 * (6/9)^3
library(mgm)
?resample
# 1) Fit mgm to example dataset (true edges: 1-4, 2-3, 1-2)
mgm_obj <- mgm(data = mgm_data$data,
type = c('g', 'c', 'c', 'g'),
level = c(1, 2, 4, 1),
k = 2,
lambdaSel = 'CV',
threshold = 'none')
# 2) Take 50 bootstrap samples using resample()
res_obj <- resample(object = mgm_obj,
data = mgm_data$data,
nB = 5)
res_obj$models
N <- 1000
x2 <- rnrom(N)
x1 <- x1 + x2 + rnorm(N)
median(x1)
x1 <- x2 + x3 + rnorm(N)
median(x1)
x2 <- rnrom(N)
x3 <- rnrom(N)
x1 <- x2 + x3 + rnorm(N)
# --- Some Example Data ---
N <- 1000
x2 <- rnrom(N)
# --- Some Example Data ---
N <- 1000
x2 <- rnorm(N)
x3 <- rnorm(N)
x1 <- x2 + x3 + rnorm(N)
median(x1)
x1 <- ifelse(x1c < 0, 0, 1)
x1c <- x2 + x3 + rnorm(N)
x1 <- ifelse(x1c < 0, 0, 1)
x1
mgm_obj <- mgm(data = cbind(x1, x2, x3),
type = c("c", "g", "g"),
level = c(2,1,1),
lambdaSel = 'CV',
threshold = 'none')
# --- Fit MGM and resample ---
set.seed(1)
mgm_obj <- mgm(data = cbind(x1, x2, x3),
type = c("c", "g", "g"),
level = c(2,1,1),
lambdaSel = 'CV',
threshold = 'none')
# Get coefficients associated with X2
res_obj$models[[1]]
# Get coefficients associated with X2
res_obj$models[[1]]$nodemodels[[1]]$fitobj
# Get coefficients associated with X2
res_obj$models[[1]]$nodemodels[[1]]$model
mgm_obj <- mgm(data = cbind(x1, x2, x3),
type = c("c", "g", "g"),
level = c(2,1,1),
lambdaSel = 'CV',
threshold = 'none')
data <- cbind(x1, x2, x3)
head(data)
mgm_obj <- mgm(data = data,
type = c("c", "g", "g"),
level = c(2,1,1),
lambdaSel = 'CV',
threshold = 'none')
mgm_obj$nodemodels[[1]]
mgm_obj$nodemodels[[1]]$model
res_obj <- resample(object = mgm_obj,
data = data,
nB = 5)
# Get coefficients associated with X2
res_obj$models[[1]]$nodemodels[[1]]$model
# Get coefficients associated with X2
res_obj$models[[1]]$nodemodels[[1]]$model[[2]]
# Get coefficients associated with X2
res_obj$models[[1]]$nodemodels[[1]]$model[[2]][2, 1]
mgm_obj$nodemodels[[1]]$model
mgm_obj$nodemodels[[1]]$model
v_par_X2 <- rep(NA, nB)
# Get coefficients associated with X2
v_par_X2 <- rep(NA, nB)
nB <- 5
res_obj <- resample(object = mgm_obj,
data = data,
nB = nB)
# Get coefficients associated with X2
v_par_X2 <- rep(NA, nB)
for(i in 1:nB) v_par_X2[i] <- res_obj$models[[1]]$nodemodels[[1]]$model[[2]][2, 1]*2
quantile(v_par_X2, probs = c(0.025, 0.095))
qnt1 <- quantile(v_par_X2, probs = c(0.025, 0.095))
exp(quantile(v_par_X2, probs = c(0.025, 0.095)))
# Do it the other way around (first exp, then quantile)
quantile(exp(v_par_X2), probs = c(0.025, 0.095))
# --- Get quantiles and ORs out of saved models ---
p <- 2 # number of predictors (so, number of variables minus 1)
res_obj$models[[1]]$nodemodels[[1]]$model[[2]]
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par_X2[j, i] <- res_obj$models[[1]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
# Get logistic reg coefficients associated with X2
m_par_X2 <- matrix(NA, nB, p)
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par_X2[j, i] <- res_obj$models[[1]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
i
j
res_obj$models[[1]]$nodemodels[[1]]$model[[2]][1+j, 1]
nB
res_obj$models[[1]]$nodemodels[[1]]$model[[2]]
j
i
m_par_X2
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par_X2[j, i] <- res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
# Get logistic reg coefficients associated with X2
m_par_X2 <- matrix(NA, nB, p)
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par_X2[j, i] <- res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
i
j
length(res_obj$models)
res_obj$models[[i]]
res_obj$models[[i]]$nodemodels[[1]]
res_obj$models[[i]]$nodemodels[[1]]$model[[2]]
1+j
res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par_X2[i, j] <- res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
m_par_X2
# Get logistic reg coefficients associated with X2
m_par <- matrix(NA, nB, p)
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par[i, j] <- res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
m_par
# Compute quantiles of ORs for each parameter
apply(m_par, 2, function(x) exp(quantile(x, probs = c(0.025, 0.095))))
# Same as:
apply(m_par, 2, function(x) quantile(exp(x), probs = c(0.025, 0.095)))
# Compute quantiles of ORs for each parameter
apply(m_par, 2, function(x) exp(quantile(x, probs = c(0.025, 0.975))))
# Same as:
apply(m_par, 2, function(x) quantile(exp(x), probs = c(0.025, 0.975)))
exp(quantile(v_par_X2, probs = c(0.025, 0.095)))
quantile(exp(v_par_X2), probs = c(0.025, 0.095)) # Do it the other way around (first exp, then quantile)
nB <- 50 # Of course should be more, just low for the example here
res_obj <- resample(object = mgm_obj,
data = data,
nB = nB)
# Get logistic reg coefficients associated with X2
m_par <- matrix(NA, nB, p)
# 2x to get from multinomial reg to logistic reg parametrization
for(j in 1:p) for(i in 1:nB) m_par[i, j] <- res_obj$models[[i]]$nodemodels[[1]]$model[[2]][1+j, 1]*2 # we have index 1+p here, because the first parameter is the intercept
# Compute quantiles of ORs for each parameter
apply(m_par, 2, function(x) exp(quantile(x, probs = c(0.025, 0.975))))
# Same as:
apply(m_par, 2, function(x) quantile(exp(x), probs = c(0.025, 0.975)))
m_par
exp(quantile(m_par[, 1], probs = c(0.025, 0.095)))
exp(quantile(m_par[, 1], probs = c(0.025, 0.095)))
quantile(exp(m_par[, 1]), probs = c(0.025, 0.095)) # Do it the other way around (first exp, then quantile)
v1 <- exp(quantile(m_par[, 1], probs = c(0.025, 0.095)))
v2 <- quantile(exp(m_par[, 1]), probs = c(0.025, 0.095))
plot(v1, v2)
v1
v1
seq(0, 1, length=50)
v1 <- exp(quantile(m_par[, 1], probs = seq(0, 1, length=50))
plot(v1, v2)
v1 <- exp(quantile(m_par[, 1], probs = seq(0, 1, length=50))
v1 <- exp(quantile(m_par[, 1], probs = seq(0, 1, length=50)))
v2 <- quantile(exp(m_par[, 1]), probs = seq(0, 1, length=50))
plot(v1, v2)
abline(0,1)
# Same as:
apply(m_par, 2, function(x) quantile(exp(x), probs = c(0.025, 0.975)))
apply(m_par, 2, function(x) exp(quantile(x, probs = c(0.025, 0.975))))
# Same as:
apply(m_par, 2, function(x) quantile(exp(x), probs = c(0.025, 0.975)))
# Compute quantiles of ORs for each parameter
apply(m_par, 2, function(x) exp(quantile(x, probs = c(0.025, 0.975))))
Tok <- 10000
Art <- 40000
10^6
(Tok*Art/ (10^6)) * 10
5962 + 3836 + 100 + 1000
5962/2 + 3836 + 100 + 1000
